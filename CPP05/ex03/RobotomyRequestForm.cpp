#include "./include/RobotomyRequestForm.hpp"
#include "./include/Bureaucrat.hpp"
#include <ctime>

RobotomyRequestForm::RobotomyRequestForm(const std::string &target) : Form("RobotomyRequestForm", 72, 45), \
                                                                    _target(target)
{
    std::cout << "Default Constructor called" << std::endl;
}

RobotomyRequestForm::RobotomyRequestForm(const RobotomyRequestForm &obj) : Form(obj), _target(obj._target)
{
    std::cout << "Copy Constructor is called" << std::endl;
    *this = obj;
}

RobotomyRequestForm& RobotomyRequestForm::operator=(const RobotomyRequestForm &obj)
{
    std::cout << "Copy assignment operator is called" << std::endl;
    (void)obj;
    return (*this);
}

RobotomyRequestForm::~RobotomyRequestForm()
{
    std::cout << "Destructor is called" << std::endl;
}

void RobotomyRequestForm::execute(Bureaucrat const &executor)
{
    if (executor.getGrade() <= this->getExecutedGrade())
    {
        /**
         * @brief std::srand()
         * srand is a pseudo-random number generator using the argument passed as seed.
         * For every different seed value used in a call to srand, 
         * the pseudo-random number generator can be expected to generate a different succession of results 
         * in the subsequent calls to rand.
         * 
         * if seed is set to 1 it will always return the same value
         * In order to generate random-like numbers, srand is usually initialized to 
         * some distinctive runtime value, like the value returned by function time
         * This is distinctive enough for most trivial randomization needs
         */
        /**
         * @brief std::rand()
         * Returns a pseudo-random integral number in the range between 0 and RAND_MAX.
         * 
         * This number is generated by an algorithm that returns a sequence of 
         * apparently non-related numbers each time it is called. This algorithm uses a seed to generate the series, 
         * which should be initialized to some distinctive value using function srand.
         * 
         */
        std::cout << this->_target << " Makes some drilling noises." << std::endl;
        std::srand(time(NULL));
        if (std::rand() % 2)
        {
            std::cout << this->_target << " has been robotomized successfully" << std::endl;
        }
        else
        {
            std::cout << this->_target << " has failed failed tremendously." << std::endl;
        }
    }
    
}